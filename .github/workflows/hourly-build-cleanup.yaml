name: Hourly Build Cleanup
on:
  workflow_run:
    workflows: ["hourly-build.yaml"]
    types:
      - completed
jobs:
  cleanup:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: List recent runs
        id: list_runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the last 4 successful runs
          RECENT_RUNS=$(gh run list --workflow="hourly-build.yaml" --branch="$GITHUB_REF_NAME" --status=success --json databaseId -q '.[0:4].databaseId')
          echo "recent_runs=$RECENT_RUNS" >> $GITHUB_ENV
      - name: Get all successful runs
        id: get_runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get all successful runs for this workflow
          ALL_RUNS=$(gh run list --workflow="hourly-build.yaml" --branch="$GITHUB_REF_NAME" --status=success --json databaseId -q '.[].databaseId')
          echo "all_runs=$ALL_RUNS" >> $GITHUB_ENV
      - name: Delete older successful runs
        if: ${{ steps.list_runs.outputs.recent_runs && steps.get_runs.outputs.all_runs }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Convert the JSON lists to arrays
          RECENT_RUNS=($RECENT_RUNS)
          ALL_RUNS=($ALL_RUNS)
          # Find runs that are in ALL_RUNS but not in RECENT_RUNS
          OLD_RUNS=()
          for run_id in "${ALL_RUNS[@]}"; do
            if [[ ! " ${RECENT_RUNS[*]} " =~ " ${run_id} " ]]; then
              OLD_RUNS+=("$run_id")
            fi
          done
          # Delete each old run
          for old_run_id in "${OLD_RUNS[@]}"; do
            echo "Deleting successful run with ID: $old_run_id"
            gh run delete "$old_run_id" -y
          done
