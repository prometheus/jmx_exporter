pipeline:
  name: release
  jobs:
    - name: release
      enabled: true
      steps:
        - name: check for release property
          run: if [ -z "${{ release }}" ]; then echo "release property is required, exiting" && exit 1; fi
        - name: change version
          enabled: true
          run: |
            ./mvnw -B versions:set -DnewVersion="${{ release }}" -DprocessAllModules >> /dev/null
            rm -Rf $(find . -name "*versionsBackup")
        - name: build & verify
          enabled: true
          run: ./mvnw -B clean verify
        - name: deploy
          enabled: true
          run: ./mvnw -s ~/.m2/prometheus.settings.xml -P release clean deploy
        - name: create / clean RELEASE directory
          enabled: true
          run: |
            mkdir -p RELEASE
            rm -Rf RELEASE/*
        - name: copy artifacts
          enabled: true
          run: |
            cp jmx_prometheus_javaagent/target/jmx_prometheus_javaagent-${{ release }}.jar RELEASE/.
            cp jmx_prometheus_standalone/target/jmx_prometheus_standalone-${{ release }}.jar RELEASE/.
        - name: create signature & checksums
          enabled: true
          working-directory: RELEASE
          run: |
            for FILE in *.jar; do gpg --armor --detach-sign "$FILE"; done
            for FILE in *.jar; do sha256sum "$FILE" > "$FILE".sha256; done
        - name: commit version
          enabled: true
          run: |
            git add -u
            git commit -s -m "release-${{ release }}"
        - name: tag version
          enabled: true
          run: |
            git tag "${{ release }}"
            git push --tags
        - name: checkout & push release branch
          enabled: true
          run: |
            git checkout -b "release-${{ release }}"
            git push --set-upstream origin "release-${{ release }}"
        - name: checkout main
          enabled: true
          run: git checkout main
        - name: change version
          enabled: true
          run: |
            ./mvnw -B versions:set -DnewVersion="${{ release }}-post" -DprocessAllModules >> /dev/null
            rm -Rf $(find . -name "*versionsBackup")
        - name: commit version
          enabled: true
          run: |
            git add -u
            git commit -s -m "Prepare for development"
        - name: git push
          enabled: true
          run: git push
