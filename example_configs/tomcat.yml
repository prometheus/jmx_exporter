---   
# Example jmx_exporter configuration for use with Tomcat 8.

lowercaseOutputLabelNames: true
lowercaseOutputName: true

whitelistObjectNames: ["Tomcat:*"]

# ------------------------ GlobalRequestProcessor -----------------------

# maxTime
- pattern: '^Tomcat<type=GlobalRequestProcessor, name=\"(.*)\"><>maxTime:'
  name: tomcat_global_processingtime_seconds_max
  valueFactor: 0.001
  help: 'Tomcat global maximum request processing time seen, in seconds.'
  type: GAUGE
  labels:
    worker: "$1"

# processingTime
- pattern: '^Tomcat<type=GlobalRequestProcessor, name=\"(.*)\"><>processingTime:'
  name: tomcat_global_processingtime_seconds
  valueFactor: 0.001
  help: 'Tomcat global cummulative request processing time, in seconds.'
  type: COUNTER
  labels:
    worker: "$1"

# bytesReceived
# bytesSent
- pattern: '^Tomcat<type=GlobalRequestProcessor, name=\"(.*)\"><>bytes(\w+):'
  help: 'Tomcat global cummulative request bytes $2.'
  name: tomcat_global_$2_bytes
  type: COUNTER
  labels:
    worker: "$1"

# requestCount
# errorCount
- pattern: '^Tomcat<type=GlobalRequestProcessor, name=\"(.*)\"><>(\w+)Count:'
  help: 'Tomcat global $2 request count.'
  type: COUNTER
  name: tomcat_global_$2
  labels:
    worker: "$1"

# ------------------------ Manager -----------------------
# These already have a help text, so we let it pass through.

# Maximum number of active sessions so far (Tomcat<type=Manager, host=localhost, context=/><>maxActive)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>maxActive:'
  type: GAUGE
  name: tomcat_sessions_active_max
  labels:
    context: "$2"

# Longest time an expired session had been alive (Tomcat<type=Manager, host=localhost, context=/><>sessionMaxAliveTime)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>sessionMaxAliveTime:'
  type: GAUGE
  name: tomcat_sessions_active_length_seconds_max
  labels:
    context: "$2"

# Number of active sessions at this moment (Tomcat<type=Manager, host=localhost, context=/><>activeSessions)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>activeSessions:'
  type: GAUGE
  name: tomcat_sessions_active_total
  labels:
    context: "$2"

# Number of sessions we rejected due to maxActive beeing reached (Tomcat<type=Manager, host=localhost, context=/><>rejectedSessions)
# Number of sessions that expired ( doesn't include explicit invalidations ) (Tomcat<type=Manager, host=localhost, context=/><>expiredSessions)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>(\w*)Sessions:'
  type: COUNTER
  name: tomcat_sessions_$3
  labels:
    context: "$2"

# Total number of sessions created by this manager (Tomcat<type=Manager, host=localhost, context=/><>sessionCounter)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>sessionCounter:'
  type: COUNTER
  name: tomcat_sessions_created
  labels:
    context: "$2"

# Number of duplicated session ids generated (Tomcat<type=Manager, host=localhost, context=/><>duplicates)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>duplicates:'
  type: COUNTER
  name: tomcat_sessions_duplicated
  labels:
    context: "$2"

# Dumping these unit-less configurations here for now:
# The maximum number of active Sessions allowed, or -1 for no limit (Tomcat<type=Manager, host=localhost, context=/><>maxActiveSessions)
# The default maximum inactive interval for Sessions created by this Manager (Tomcat<type=Manager, host=localhost, context=/><>maxInactiveInterval)
# The frequency of the manager checks (expiration and passivation) (Tomcat<type=Manager, host=localhost, context=/><>processExpiresFrequency)
# The session id length (in bytes) of Sessions created by this Manager (Tomcat<type=Manager, host=localhost, context=/><>sessionIdLength)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>(maxActiveSessions|maxInactiveInterval|processExpiresFrequency|sessionIdLength):'
  type: GAUGE
  name: tomcat_sessions_conf_$3
  labels:
    context: "$2"

# Average time an expired session had been alive (Tomcat<type=Manager, host=localhost, context=/><>sessionAverageAliveTime)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>(sessionAverageAliveTime):'
  type: GAUGE
  name: tomcat_sessions_alive_average_seconds
  labels:
    context: "$2"

# Time spent doing housekeeping and expiration (Tomcat<type=Manager, host=localhost, context=/><>processingTime)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>(processingTime):'
  valueFactor: 0.001
  type: COUNTER
  name: tomcat_sessions_$3_seconds
  labels:
    context: "$2"

# Session creation rate in sessions per minute (Tomcat<type=Manager, host=localhost, context=/><>sessionCreateRate)
# Session expiration rate in sessions per minute (Tomcat<type=Manager, host=localhost, context=/><>sessionExpireRate)
- pattern: '^Tomcat<type=Manager, host=(.*), context=(.*)><>session(Create|Expire)Rate:'
  type: GAUGE
  name: tomcat_sessions_$3d_per_minute
  labels:
    context: "$2"

# ------------------------ RequestProcessor -----------------------
# These are properties of org.apache.coyote.RequestInfo
# Some are per-request, non-aggregated, at the time of the scraping. Useless for Prometheus:
#  - lastRequestProcessingTime
#  - requestProcessingTime
#  - requestBytesReceived
#  - requestBytesSent
#  - contentLength
#  - serverPort
#  - stage

# bytesReceived (Tomcat<type=RequestProcessor, worker="ajp-nio-127.0.0.1-8009", name=AjpRequest1><>bytesReceived)
# bytesSent (Tomcat<type=RequestProcessor, worker="ajp-nio-127.0.0.1-8009", name=AjpRequest1><>bytesSent)
- pattern: '^Tomcat<type=RequestProcessor, worker=\"(.*)\", name=(.*)><>bytes(.*):'
  name: tomcat_requestprocessor_$3_bytes_total
  help: 'Tomcat: bytes $3 by the request processors.'
  type: COUNTER
  labels:
    worker: "$1"
    processor: "$2"

# errorCount (Tomcat<type=RequestProcessor, worker="ajp-nio-127.0.0.1-8009", name=AjpRequest1><>errorCount)
# requestCount (Tomcat<type=RequestProcessor, worker="ajp-nio-127.0.0.1-8009", name=AjpRequest1><>requestCount)
- pattern: '^Tomcat<type=RequestProcessor, worker=\"(.*)\", name=(.*)><>requestCount:'
  name: tomcat_requestprocessor_requests_total
  help: 'Tomcat: number of requests handled by the processor, resulting in any HTTP response code.'
  type: COUNTER
  labels:
    worker: "$1"
    processor: "$2"
- pattern: '^Tomcat<type=RequestProcessor, worker=\"(.*)\", name=(.*)><>errorCount'
  name: tomcat_requestprocessor_requests_error_total
  help: 'Tomcat: number of requests handled by the processor that resulted in HTTP response code greater than or equal to 400.'
  type: COUNTER
  labels:
    worker: "$1"
    processor: "$2"

# processingTime (Tomcat<type=RequestProcessor, worker="ajp-nio-127.0.0.1-8009", name=AjpRequest1><>processingTime)
- pattern: '^Tomcat<type=RequestProcessor, worker=\"(.*)\", name=(.*)><>processingTime:'
  name: tomcat_requestprocessor_seconds
  valueFactor: 0.001
  help: 'Tomcat: The total response time for a request handled by the processor, in seconds. The URI of that request is available in the mBean''s maxRequestUri.'
  type: COUNTER
  labels:
    worker: "$1"
    processor: "$2"


# maxTime (Tomcat<type=RequestProcessor, worker="ajp-nio-127.0.0.1-8009", name=AjpRequest1><>maxTime)
- pattern: '^Tomcat<type=RequestProcessor, worker=\"(.*)\", name=(.*)><>maxTime:'
  name: tomcat_requestprocessor_seconds_max
  valueFactor: 0.001
  help: 'Tomcat: The longest response time for a request handled by the processor, in seconds. The URI of that request is available in the mBean''s maxRequestUri.'
  type: GAUGE
  labels:
    worker: "$1"
    processor: "$2"

# ------------------------ Servlet -----------------------
# These already have a help text, so we let it pass through.
# Bean: org.apache.catalina.core.StandardWrapper
# Ignored:
#  - loadOnStartup: The load-on-startup order value (negative value means load on first call) for this servlet. (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>)

# The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent. (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>available)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>available:'
  name: tomcat_servlet_available_seconds
  valueFactor: 0.001
  type: GAUGE
  labels:
    context: "$1"
    servlet: "$2"

# The processor delay for this component. (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>backgroundProcessorDelay)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>backgroundProcessorDelay:'
  name: tomcat_servlet_background_processor_delay_seconds
  help: 'The number of seconds between starting the engine, and starting the thread. It is this thread that is responsible for automatic deployments with the autoDeploy feature of Tomcat. The Background Processing Thread runs periodically looking for new applications to deploy.'
  type: GAUGE
  labels:
    context: "$1"
    servlet: "$2"

# Time taken to load the Servlet class (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>classLoadTime)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>classLoadTime:'
  name: tomcat_servlet_class_load_seconds
  type: GAUGE
  labels:
    context: "$1"
    servlet: "$2"

# Time taken to load and initialise the Servlet (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>loadTime)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>loadTime:'
  name: tomcat_servlet_load_seconds
  type: GAUGE
  labels:
    context: "$1"
    servlet: "$2"

# The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet). (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>countAllocated)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>countAllocated:'
  name: tomcat_servlet_allocated
  type: GAUGE
  labels:
    context: "$1"
    servlet: "$2"

# Error count (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>errorCount)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>errorCount:'
  name: tomcat_servlet_errors
  type: COUNTER
  labels:
    context: "$1"
    servlet: "$2"

# Maximum number of STM instances. (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>maxInstances)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>maxInstances:'
  name: tomcat_servlet_conf_instances_max
  type: GAUGE
  labels:
    context: "$1"
    servlet: "$2"

# Total execution time of the servlet's service method (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>processingTime)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>processingTime:'
  name: tomcat_servlet_processing_seconds
  valueFactor: 0.001
  type: COUNTER
  labels:
    context: "$1"
    servlet: "$2"

# Maximum processing time of a request (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>maxTime)
# Minimum processing time of a request (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>minTime)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>(max|min)Time:'
  name: tomcat_servlet_processing_$3_seconds
  valueFactor: 0.001
  type: GAUGE
  labels:
    context: "$1"
    servlet: "$2"

# Number of requests processed by this wrapper (Tomcat<j2eeType=Servlet, WebModule=//localhost/, name=default, J2EEApplication=none, J2EEServer=none><>requestCount)
- pattern: '^Tomcat<j2eeType=Servlet, WebModule=//localhost(.*), name=(.*), J2EEApplication=none, J2EEServer=none><>requestCount:'
  name: tomcat_servlet_requests
  type: GAUGE
  labels:
    context: "$1"
    servlet: "$2"

# ------------------------ StringCache -----------------------

- pattern: '^Tomcat<type=StringCache><>accessCount:'
  name: tomcat_stringcache_access
  help: 'Tomcat: The number of times the string cache was accessed.'
  type: COUNTER
- pattern: '^Tomcat<type=StringCache><>cacheSize:'
  name: tomcat_stringcache_size
  valueFactor: 0.001
  help: 'Tomcat: The number of entries in the string cache.'
  type: GAUGE
- pattern: '^Tomcat<type=StringCache><>hitCount:'
  name: tomcat_stringcache_hits
  help: 'Tomcat: The number of times a String was obtained from the cache for a ByteChunk or CharChunk'
  type: COUNTER
- pattern: '^Tomcat<type=StringCache><>trainThreshold:'
  name: tomcat_stringcache_train_threshold
  help: 'Tomcat: The number of times toString() must be called before the string cache is activated.'
  type: GAUGE

# ------------------------ ThreadPool -----------------------

- pattern: '^Tomcat<type=ThreadPool, name="(.*)"><>currentThreadCount:'
  name: tomcat_threadpool_threads_total
  help: 'Tomcat: The number of threads that are managed by the pool.'
  type: GAUGE
  labels:
    pool: $1
- pattern: '^Tomcat<type=ThreadPool, name="(.*)"><>currentThreadsBusy:'
  name: tomcat_threadpool_threads_busy
  help: 'Tomcat: The number of threads that are in use to handle connections.'
  type: GAUGE
  labels:
    pool: $1
- pattern: '^Tomcat<type=ThreadPool, name="(.*)"><>connectionCount:'
  name: tomcat_threadpool_connections
  help: 'Tomcat: Current count of connections handled by this endpoint, if the connections are counted (which happens when the maximum count of connections is limited), or -1 if they are not.'
  type: GAUGE
  labels:
    pool: $1

# Let's just dump all these for now, without the metric type or units suffix:
# - acceptorThreadCount
# - acceptorThreadPriority
# - backlog
# - executorTerminationTimeoutMillis
# - keepAliveCount
# - keepAliveTimeout
# - localPort
# - maxConnections
# - maxHeaderCount
# - maxKeepAliveRequests
# - maxThreads
# - minSpareThreads
# - oomParachute
# - pollerThreadCount
# - pollerThreadPriority
# - port
# - selectorTimeout
# - soLinger
# - soTimeout
# - threadPriority
- pattern: '^Tomcat<type=ThreadPool, name="(.*)"><>(.*):'
  name: tomcat_threadpool_$2
  labels:
    pool: $1

# ------------------------ WebModule -----------------------
# These already have a help text, so we let it pass through.

# Cumulative error count of all servlets in this context (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>errorCount)
# Cumulative request count of all servlets in this context (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>requestCount)
- pattern: '^Tomcat<j2eeType=WebModule, name=//localhost(.*), J2EEApplication=none, J2EEServer=none><>requestCount:'
  name: tomcat_webmodule_requests
  type: COUNTER
  labels:
    context: $1
- pattern: '^Tomcat<j2eeType=WebModule, name=//localhost(.*), J2EEApplication=none, J2EEServer=none><>errorCount:'
  name: tomcat_webmodule_requests_errors
  type: COUNTER
  labels:
    context: $1

# Maximum execution time of all servlets in this context (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>maxTime)
# Minimum execution time of all servlets in this context (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>minTime)
- pattern: '^Tomcat<j2eeType=WebModule, name=//localhost(.*), J2EEApplication=none, J2EEServer=none><>(min|max)Time:'
  name: tomcat_webmodule_execution__$2
  valueFactor: 0.001
  type: GAUGE
  labels:
    context: $1

# Cumulative execution times of all servlets in this context (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>processingTime)
- pattern: '^Tomcat<j2eeType=WebModule, name=//localhost(.*), J2EEApplication=none, J2EEServer=none><>processingTime:'
  name: tomcat_webmodule_execution_seconds
  valueFactor: 0.001
  type: COUNTER
  labels:
    context: $1

# The session timeout (in minutes) for this web application (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>sessionTimeout)
- pattern: '^Tomcat<j2eeType=WebModule, name=//localhost(.*), J2EEApplication=none, J2EEServer=none><>sessionTimeout:'
  name: tomcat_webmodule_session_timeout_seconds
  valueFactor: 0.001
  type: GAUGE
  labels:
    context: $1

# Time (in milliseconds since January 1, 1970, 00:00:00) when this context was started (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>startTime)
- pattern: '^Tomcat<j2eeType=WebModule, name=//localhost(.*), J2EEApplication=none, J2EEServer=none><>startTime:'
  name: tomcat_webmodule_start_time_seconds
  valueFactor: 0.001
  type: GAUGE
  labels:
    context: $1

# Time (in milliseconds) it took to start this context (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>startupTime)
# Time spend scanning jars for TLDs for this context (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>tldScanTime)
- pattern: '^Tomcat<j2eeType=WebModule, name=//localhost(.*), J2EEApplication=none, J2EEServer=none><>(startupTime|tldScanTime):'
  name: tomcat_webmodule_$2_seconds
  valueFactor: 0.001
  type: COUNTER
  labels:
    context: $1

# Amount of ms that the container will wait for servlets to unload (Tomcat<j2eeType=WebModule, name=//localhost/, J2EEApplication=none, J2EEServer=none><>unloadDelay)
- pattern: '^Tomcat<j2eeType=WebModule, name=//localhost(.*), J2EEApplication=none, J2EEServer=none><>unloadDelay:'
  name: tomcat_webmodule_unloadDelay_seconds
  valueFactor: 0.001
  type: GAUGE
  labels:
    context: $1

# ------------------------ WILDCARD -----------------------

# This ensures we export all metrics, even if one of the above regexes fail, or if new metrics are added.
- pattern: ".*"

